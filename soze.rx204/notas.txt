//import java.util.ArrayList;
//import java.util.Arrays;
//import java.util.List;


//import io.reactivex.observers.DefaultObserver;
//import soze.rx204.Person.SEX;

/**
 * Hello world!
 *
 */


        //Observable<String> helloWorldObservable = Observable.just("Opa Soze");

        /*
        *   Sobrescrição sem função lambida 
        */
        /*
        helloWorldObservable.subscribe(new DefaultObserver<String>()
        {
            @Override
            public void onNext(String s)
            {
                System.out.println(s);
            }
            @Override
            public void onError(Throwable e)
            {
                e.printStackTrace();
            }
            @Override
            public void onComplete() {
                System.out.println("Final do observável!");
            }
        });
        */

        /*
        *   Sobrescrição com função lambida 
        */
        /*
        helloWorldObservable.subscribe(s ->  System.out.println(s),
                                       throwable -> throwable.printStackTrace(),
                                       () -> System.out.println("Fim da transmissão!!!"));
       */

        /*
        String strings[] = new String[]{"Opa", "Soze"};
        Observable.fromArray(strings).subscribe(s ->  System.out.println(s),
                                                throwable -> throwable.printStackTrace(),
                                                () -> System.out.println("Fim da transmissão!!!"));
        */

        /*
        List<Integer> intergerList = Arrays.asList(54,12,10,78,69,33,66,99,84);

        Observable.fromIterable(intergerList)
          .filter(i -> i % 2 == 0)
          .sorted()
          .subscribe(i -> System.out.println(i),
                     throwable -> throwable.printStackTrace(),
                     () -> System.out.println("Emittion completes"));
        */

        /*
        Observable<Person> firstObservable = Observable.create(emitter -> emitter.onNext(new Person("Shayan Tahir", 22, Person.SEX.MALE)));
        Observable<Person> secondObservable = Observable.create(emitter -> emitter.onNext(new Person("Bilal Ahmed", 25, Person.SEX.MALE)));
        Observable<Person> tudoObservable = secondObservable.mergeWith(firstObservable);
        tudoObservable.startWith(new Person("Jon Doe", 20, Person.SEX.MALE))
                        //.filter(person -> person.age  > 23)
                        .subscribe(person -> System.out.println(person.name + ", " + person.age + ", " + person.sex),
                        Throwable::printStackTrace,
                        () -> System.out.println("Emittion complete"));
        */